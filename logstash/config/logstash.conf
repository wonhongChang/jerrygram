input {
  beats {
    port => 5044
  }
  
  # Kafka input for real-time events
  kafka {
    bootstrap_servers => "kafka:29092"
    topics => ["search-events", "user-events", "post-events"]
    group_id => "logstash-events"
    consumer_threads => 3
    decorate_events => true
    codec => "json"
  }
  
  # File inputs for application logs
  file {
    path => "/var/log/apps/dotnet-backend/*.log"
    start_position => "beginning"
    tags => ["dotnet-backend"]
    codec => "json"
  }
  
  file {
    path => "/var/log/apps/java-backend/*.log"
    start_position => "beginning"
    tags => ["java-backend"]
    codec => "json"
  }
  
  file {
    path => "/var/log/apps/recommend-service/*.log"
    start_position => "beginning"
    tags => ["recommend-service"]
    codec => "json"
  }
}

filter {
  # Add common fields
  mutate {
    add_field => { "environment" => "%{ENVIRONMENT:dev}" }
    add_field => { "platform" => "jerrygram" }
  }
  
  # Process .NET backend logs
  if "dotnet-backend" in [tags] {
    mutate {
      add_field => { "service" => "dotnet-backend" }
      add_field => { "technology" => "aspnet-core" }
    }
    
    # Parse .NET structured logs
    if [message] {
      json {
        source => "message"
        target => "parsed"
      }
    }
  }
  
  # Process Java backend logs
  if "java-backend" in [tags] {
    mutate {
      add_field => { "service" => "java-backend" }
      add_field => { "technology" => "spring-boot" }
    }
    
    # Parse Java structured logs
    if [message] {
      json {
        source => "message"
        target => "parsed"
      }
    }
  }
  
  # Process recommend service logs
  if "recommend-service" in [tags] {
    mutate {
      add_field => { "service" => "recommend-service" }
      add_field => { "technology" => "nodejs" }
    }
  }
  
  # Process Kafka events
  if [@metadata][kafka] {
    mutate {
      add_field => { "event_source" => "kafka" }
      add_field => { "kafka_topic" => "%{[@metadata][kafka][topic]}" }
      add_field => { "kafka_partition" => "%{[@metadata][kafka][partition]}" }
      add_field => { "kafka_offset" => "%{[@metadata][kafka][offset]}" }
    }

    if ![service] {
      if [@metadata][kafka][topic] == "search-events" {
        mutate { add_field => { "service" => "dotnet-backend" } }
      } else if [@metadata][kafka][topic] == "user-events" {
        mutate { add_field => { "service" => "java-backend" } }
      } else if [@metadata][kafka][topic] == "post-events" {
        mutate { add_field => { "service" => "java-backend" } }
      }
    }
    
    # Set service field based on topic
    if [kafka_topic] == "search-events" {
      mutate { add_field => { "event_type" => "search" } }
    } else if [kafka_topic] == "user-events" {
      mutate { add_field => { "event_type" => "user" } }
    } else if [kafka_topic] == "post-events" {
      mutate { add_field => { "event_type" => "post" } }
    }
  }
  
  # Extract user ID and request ID for correlation
  if [userId] {
    mutate {
      add_field => { "user_id" => "%{userId}" }
    }
  }
  
  if [correlationId] {
    mutate {
      add_field => { "correlation_id" => "%{correlationId}" }
    }
  }
  
  # Clean up fields
  mutate {
    remove_field => [ "host", "agent", "ecs", "input", "log" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "jerrygram-%{service}-%{+YYYY.MM.dd}"
  }
  
  # Debug output (remove in production)
  stdout { 
    codec => rubydebug {
      metadata => true
    }
  }
}